import React, { useState, useEffect } from "react";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";
import { db } from "../../firebase/config";
import { useNavigate } from "react-router-dom";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import "../../css/Form.css";

const initialState = {
  name: "",
  phone: "",
  email: "",
  dob: "",
  customer_id: "",
  employeeID: "",
  address: "",
  member_since: "",
  role: "customer", // Default role
  bank_details: {
    account_number: "",
    bank_name: "",
    branch_name: "",
    ifsc_code: "",
  },
  document_number: "",
  shareCode: "",
  countryCode: "+91", // Default to India
};

const countryCodes = [
  { code: "+91", name: "India" },
  { code: "+1", name: "USA" },
  { code: "+44", name: "UK" },
  { code: "+61", name: "Australia" },
  { code: "+81", name: "Japan" },
  { code: "+971", name: "UAE" },
  { code: "+880", name: "Bangladesh" },
];

const AddUser = () => {
  const [formData, setFormData] = useState(initialState);
  const [error, setError] = useState("");
  const showError = (message) => {
    setError(message);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const [isCustomerIDAutoGenerated, setIsCustomerIDAutoGenerated] = useState(false);
  const [isEmployeeIDAutoGenerated, setIsEmployeeIDAutoGenerated] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    if (formData.role === "customer") {
      setFormData((prev) => ({ ...prev, employeeID: "" }));
    }
  }, [formData.role]);

  const handleChange = (e) => {
    const { name, value } = e.target;

    if (name.startsWith("bank_")) {
      const field = name.replace("bank_", "");
      setFormData((prev) => ({
        ...prev,
        bank_details: {
          ...prev.bank_details,
          [field]: value,
        },
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const validateForm = () => {
    if (!formData.name) {
      showError("Full Name is required.");
      return false;
    }

    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (formData.email && !emailRegex.test(formData.email)) {
      showError("Please enter a valid email address.");
      return false;
    }

    if (!formData.dob) {
      showError("Date of Birth is required.");
      return false;
    }

    const customerIDRegex = /^[0-9]{9}$/;
    if (!formData.customer_id || !customerIDRegex.test(formData.customer_id)) {
      showError("Customer ID must be 9 digits.");
      return false;
    }

    if (formData.role === "employee" && (!formData.employeeID || formData.employeeID.length !== 5)) {
      showError("Employee ID must be exactly 5 digits.");
      return false;
    }

    if (!formData.phone || !/^[0-9]{7,15}$/.test(formData.phone)) {
      showError("Please enter a valid phone number.");
      return false;
    }

    return true;
  };

  const generateCustomerID = () => Math.floor(100000000 + Math.random() * 900000000).toString();
  const generateEmployeeID = () => Math.floor(10000 + Math.random() * 90000).toString();

  const checkForDuplicates = async () => {
    const usersCollection = collection(db, "users_01");
    const fullPhone = formData.phone;

    const qCustomerID = query(usersCollection, where("customer_id", "==", formData.customer_id));
    const querySnapshotCustomerID = await getDocs(qCustomerID);
    if (!querySnapshotCustomerID.empty) {
      showError("A user with this Customer ID already exists.");
      return true;
    }

    const qPhone = query(usersCollection, where("phone", "==", fullPhone));
    const querySnapshotPhone = await getDocs(qPhone);
    if (!querySnapshotPhone.empty) {
      showError("A user with this phone number already exists.");
      return true;
    }

    const qEmail = query(usersCollection, where("email", "==", formData.email));
    const querySnapshotEmail = await getDocs(qEmail);
    if (!querySnapshotEmail.empty) {
      showError("A user with this email already exists.");
      return true;
    }

    if (formData.role === "employee") {
      const qEmployeeID = query(usersCollection, where("employeeID", "==", formData.employeeID));
      const querySnapshotEmployeeID = await getDocs(qEmployeeID);
      if (!querySnapshotEmployeeID.empty) {
        showError("A user with this Employee ID already exists.");
        return true;
      }
    }

    return false;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    showError("");

    if (!validateForm()) return;

    const isDuplicate = await checkForDuplicates();
    if (isDuplicate) return;

    const fullPhone = formData.countryCode + formData.phone;

    try {
      const userCollection = collection(db, "users_01");
      await addDoc(userCollection, formData); // âœ…


      alert("User added successfully!");
      setFormData(initialState);
      navigate("/admin/users");
    } catch (err) {
      console.error("Error adding user:", err);
      showError("Error adding user. Please try again.");
    }
  };

  return (
    <div className="form-container">
      <button style={{ width: "150px" }} onClick={() => navigate("/admin/users")}>
        Back to Users
      </button>
      <h2>Add User</h2>
      {error && <p className="error">{error}</p>}
      <form onSubmit={handleSubmit}>
        <div className="input-group">
          <label>Full Name</label>
          <input name="name" value={formData.name} onChange={handleChange} placeholder="Full Name" required />
        </div>

        <div className="input-group">
  <label>Phone</label>
  <PhoneInput
    country={"in"}
    value={formData.phone}
    onChange={(phone) => setFormData((prev) => ({ ...prev, phone }))}
    inputProps={{
      name: "phone",
      required: true,
    }}
  />
</div>


        <div className="input-group">
          <label>Email</label>
          <input name="email" value={formData.email} onChange={handleChange} placeholder="Email" />
        </div>

        <div className="input-group">
          <label>Date of Birth</label>
          <input type="date" name="dob" value={formData.dob} onChange={handleChange} required />
        </div>

        <div className="input-group"style={{ marginBottom: "20px" }}>
          <label> Customer ID  </label>
          <div style={{ display: "flex", alignItems: "center"}}>
              <input
              name="customer_id"
              value={formData.customer_id}
              onChange={handleChange}
              placeholder="Customer ID  "
              required
            />
            <button
              type="button"
              onClick={() => {
                const generatedID = generateCustomerID();
                setFormData((prev) => ({ ...prev, customer_id: generatedID }));
                setIsCustomerIDAutoGenerated(true);
              }}
            >
              Auto-Generate ID
            </button>
          </div>
        </div>

       


        <div className="input-group" style={{ marginTop: "20px" }}>
          <label>Employee ID  </label>
          <div style={{ display: "flex", alignItems: "center" }}>
              <input
              name="employeeID"
              value={formData.employeeID}
              onChange={handleChange}
              placeholder="Employee ID  "
              required={formData.role === "employee"}
            />
            {formData.role === "employee" && (
              <button
                type="button"
                onClick={() => {
                  const generatedEmployeeID = generateEmployeeID();
                  setFormData((prev) => ({ ...prev, employeeID: generatedEmployeeID }));
                  setIsEmployeeIDAutoGenerated(true);
                }}
              >
                Auto-Generate Employee ID
              </button>
            )}
          </div>
        </div>

        <div className="input-group">
          <label>Address</label>
          <input name="address" value={formData.address} onChange={handleChange} placeholder="Address" required />
        </div>

        <div className="input-group">
          <label>Member Since</label>
          <input type="date" name="member_since" value={formData.member_since} onChange={handleChange} />
        </div>

        <div className="input-group">
          <label>Role</label>
          <select name="role" value={formData.role} onChange={handleChange}>
            <option value="customer">Customer</option>
            <option value="employee">Employee</option>
            <option value="admin">Admin</option>
            <option value="teamleader">Teamleader</option>
          </select>
        </div>

        <div className="input-group">
          <label>Bank Account Number</label>
          <input
            name="bank_account_number"
            value={formData.bank_details.account_number}
            onChange={handleChange}
            placeholder="Account Number"
          />
        </div>

        <div className="input-group">
          <label>Bank Name</label>
          <input
            name="bank_bank_name"
            value={formData.bank_details.bank_name}
            onChange={handleChange}
            placeholder="Bank Name"
          />
        </div>

        <div className="input-group">
          <label>Branch Name</label>
          <input
            name="bank_branch_name"
            value={formData.bank_details.branch_name}
            onChange={handleChange}
            placeholder="Branch Name"
          />
        </div>

        <div className="input-group">
          <label>IFSC Code</label>
          <input
            name="bank_ifsc_code"
            value={formData.bank_details.ifsc_code}
            onChange={handleChange}
            placeholder="IFSC Code"
          />
        </div>

        <div className="input-group">
          <label>Document Number</label>
          <input
            name="document_number"
            value={formData.document_number}
            onChange={handleChange}
            placeholder="Document Number"
          />
        </div>

        <div className="input-group">
          <label>Share Code</label>
          <input
            name="shareCode"
            value={formData.shareCode}
            onChange={handleChange}
            placeholder="Share Code"
          />
        </div>

        <div className="form-actions">
          <button type="submit">Add User</button>
        </div>
      </form>
    </div>
  );
};

export default AddUser;
